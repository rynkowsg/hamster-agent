
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__src_model_db_Hamster_proxy_hpp__PROXY_MARSHAL_H
#define __dbusxx__src_model_db_Hamster_proxy_hpp__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace gnome {

class Hamster_proxy
: public ::DBus::InterfaceProxy
{
public:

    Hamster_proxy()
    : ::DBus::InterfaceProxy("org.gnome.Hamster")
    {
        connect_signal(Hamster_proxy, ActivitiesChanged, _ActivitiesChanged_stub);
        connect_signal(Hamster_proxy, FactsChanged, _FactsChanged_stub);
        connect_signal(Hamster_proxy, TagsChanged, _TagsChanged_stub);
        connect_signal(Hamster_proxy, ToggleCalled, _ToggleCalled_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t AddCategory(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("AddCategory");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetCategoryId(const std::string& category)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << category;
        call.member("GetCategoryId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< int32_t, std::string > > GetCategories()
    {
        ::DBus::CallMessage call;
        call.member("GetCategories");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< int32_t, std::string > > argout;
        ri >> argout;
        return argout;
    }

    void RemoveCategory(const int32_t& id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << id;
        call.member("RemoveCategory");
        ::DBus::Message ret = invoke_method (call);
    }

    void UpdateCategory(const int32_t& id, const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << id;
        wi << name;
        call.member("UpdateCategory");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t AddActivity(const std::string& name, const int32_t& category_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << category_id;
        call.member("AddActivity");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    bool ChangeCategory(const int32_t& id, const int32_t& category_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << id;
        wi << category_id;
        call.member("ChangeCategory");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< std::string, std::string > > GetActivities(const std::string& search)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << search;
        call.member("GetActivities");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }

    std::map< std::string, ::DBus::Variant > GetActivityByName(const std::string& activity, const int32_t& category_id, const bool& resurrect)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << activity;
        wi << category_id;
        wi << resurrect;
        call.member("GetActivityByName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< int32_t, std::string, int32_t, std::string > > GetCategoryActivities(const int32_t& category_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << category_id;
        call.member("GetCategoryActivities");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< int32_t, std::string, int32_t, std::string > > argout;
        ri >> argout;
        return argout;
    }

    void RemoveActivity(const int32_t& id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << id;
        call.member("RemoveActivity");
        ::DBus::Message ret = invoke_method (call);
    }

    void UpdateActivity(const int32_t& id, const std::string& name, const int32_t& category_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << id;
        wi << name;
        wi << category_id;
        call.member("UpdateActivity");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t AddFact(const std::string& fact, const int32_t& start_time, const int32_t& end_time, const bool& temporary)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fact;
        wi << start_time;
        wi << end_time;
        wi << temporary;
        call.member("AddFact");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string, int32_t, std::string, std::vector< std::string >, int32_t, int32_t, bool > GetFact(const int32_t& fact_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fact_id;
        call.member("GetFact");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string, int32_t, std::string, std::vector< std::string >, int32_t, int32_t, bool > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string, int32_t, std::string, std::vector< std::string >, int32_t, int32_t, bool > GetFacts(const uint32_t& start_date, const uint32_t& end_date, const std::string& search_terms, const uint32_t& limit, const bool& asc_by_date)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << start_date;
        wi << end_date;
        wi << search_terms;
        wi << limit;
        wi << asc_by_date;
        call.member("GetFacts");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string, int32_t, std::string, std::vector< std::string >, int32_t, int32_t, bool > argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string, int32_t, std::string, std::vector< std::string >, int32_t, int32_t, bool > > GetTodaysFacts()
    {
        ::DBus::CallMessage call;
        call.member("GetTodaysFacts");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string, int32_t, std::string, std::vector< std::string >, int32_t, int32_t, bool > > argout;
        ri >> argout;
        return argout;
    }

    void RemoveFact(const int32_t& fact_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fact_id;
        call.member("RemoveFact");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t UpdateFact(const int32_t& fact_id, const std::string& fact, const int32_t& start_time, const int32_t& end_time, const bool& temporary, const bool& exported)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fact_id;
        wi << fact;
        wi << start_time;
        wi << end_time;
        wi << temporary;
        wi << exported;
        call.member("UpdateFact");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< int32_t, std::string, bool > > GetTagIds(const std::vector< std::string >& tags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tags;
        call.member("GetTagIds");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< int32_t, std::string, bool > > argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< int32_t, std::string, bool > > GetTags(const bool& only_autocomplete)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << only_autocomplete;
        call.member("GetTags");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< int32_t, std::string, bool > > argout;
        ri >> argout;
        return argout;
    }

    void SetTagsAutocomplete(const std::string& tags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tags;
        call.member("SetTagsAutocomplete");
        ::DBus::Message ret = invoke_method (call);
    }

    void StopTracking(const int32_t& end_time)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << end_time;
        call.member("StopTracking");
        ::DBus::Message ret = invoke_method (call);
    }

    void Toggle()
    {
        ::DBus::CallMessage call;
        call.member("Toggle");
        ::DBus::Message ret = invoke_method (call);
    }

    void Quit()
    {
        ::DBus::CallMessage call;
        call.member("Quit");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void ActivitiesChanged() = 0;
    virtual void FactsChanged() = 0;
    virtual void TagsChanged() = 0;
    virtual void ToggleCalled() = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ActivitiesChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ActivitiesChanged();
    }
    void _FactsChanged_stub(const ::DBus::SignalMessage &sig)
    {
        FactsChanged();
    }
    void _TagsChanged_stub(const ::DBus::SignalMessage &sig)
    {
        TagsChanged();
    }
    void _ToggleCalled_stub(const ::DBus::SignalMessage &sig)
    {
        ToggleCalled();
    }
};

} } 
#endif //__dbusxx__src_model_db_Hamster_proxy_hpp__PROXY_MARSHAL_H
